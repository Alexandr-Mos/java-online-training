package my.home.algoritmization.Matr;

import java.util.Scanner;

/*
Магическая константа М = n(n*n+1)/2
 */
/*
Здравствуйте. Вопрос по задаче 2.2.16 (магические квадраты). Вы, в предыдущих ответах на вопросы, говорили, что эту задачу надо решать через перебор всех перестановок в матрице. С матрицей 3х3 компьютер справляется, с матрицей 4х4 вариантов становится слишком много и, по моим подсчётам, компьютер должен трудится 10 суток чтобы их перебрать. Не говоря уже о бОльших матрицах. Вопрос: так всё и задумывалось?

я реализовал так как говорили на вебинаре, берем линейный массив всех чисел квадрата от 1 до n^2, через n выражаем все номера элементов в матрице n x n, и записываем соответствующие правила проверки рядов, столбцов и диагоналей на сумму. Потом свапаем любые 2 элемента в линейном массиве до тех пор пока не появится магический квадрат, n=3 и 4 ищет быстро, 5 долго, 6 не пробовал.
*/

public class Matr16 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] matr = new int[n][n];

        int i = n/2;
        int j = n-1;

        if (n % 2 == 1) {
            for (int count = 1; count <= n*n; ) {
                if (i == -1 && j == n){
                    i = 0;
                    j = n-2;
                } else {
                    if (i < 0) {
                        i = n - 1;
                    }
                    if (j == n) {
                        j = 0;
                    }
                    if (matr[i][j] != 0) {
                        i++;
                        j -= 2;
                        continue;
                    }
                }
                matr[i][j] = count;
                j++;
                i--;
                count++;

            }
        } else {
            int x = 1;
//            for (int k = 0; k < n; k++) {
//                for (int l = 0; l < n; l++) {
//                    matr[k][l] = x;
//                    x++;
//                }
//            }
            int z = 2;
            for (int k = 0; k < n ; k++) {
                for (int l = 0; l < n ; l++) {
                    if (z > 4) {
                        z = 1;
                    }
                    if (z > 2) {
                        matr[k][l] = x;
                    }
                    z++;
                    x++;
                }
            }

            x = 1;
            z = 4;
            for (int k = n-1; k >= 0 ; k--) {
                for (int l = n-1; l >= 0 ; l--) {
                    if (z > 4) {
                        z = 1;
                    }
                    if (z > 2) {
                        matr[k][l] = x;
                    }
                    z++;
                    x++;
                }
            }
        }

        Matr.print(matr,n,n);
    }
}
